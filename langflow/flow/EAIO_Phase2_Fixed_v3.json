{
  "data": {
    "edges": [
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "ChatInput",
            "id": "ChatInput-main",
            "name": "message",
            "output_types": ["Message"]
          },
          "targetHandle": {
            "fieldName": "input_value",
            "id": "Agent-coordinator",
            "inputTypes": ["Message"],
            "type": "str"
          }
        },
        "id": "reactflow__edge-ChatInput-main{œdataTypeœ:œChatInputœ,œidœ:œChatInput-mainœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-Agent-coordinator{œfieldNameœ:œinput_valueœ,œidœ:œAgent-coordinatorœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "ChatInput-main",
        "sourceHandle": "{œdataTypeœ:œChatInputœ,œidœ:œChatInput-mainœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
        "target": "Agent-coordinator",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œAgent-coordinatorœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "SQLComponent",
            "id": "SQLComponent-database",
            "name": "component_as_tool",
            "output_types": ["Tool"]
          },
          "targetHandle": {
            "fieldName": "tools",
            "id": "Agent-coordinator",
            "inputTypes": ["Tool"],
            "type": "other"
          }
        },
        "id": "reactflow__edge-SQLComponent-database{œdataTypeœ:œSQLComponentœ,œidœ:œSQLComponent-databaseœ,œnameœ:œcomponent_as_toolœ,œoutput_typesœ:[œToolœ]}-Agent-coordinator{œfieldNameœ:œtoolsœ,œidœ:œAgent-coordinatorœ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "SQLComponent-database",
        "sourceHandle": "{œdataTypeœ:œSQLComponentœ,œidœ:œSQLComponent-databaseœ,œnameœ:œcomponent_as_toolœ,œoutput_typesœ:[œToolœ]}",
        "target": "Agent-coordinator",
        "targetHandle": "{œfieldNameœ:œtoolsœ,œidœ:œAgent-coordinatorœ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "URLComponent",
            "id": "URLComponent-weather",
            "name": "component_as_tool",
            "output_types": ["Tool"]
          },
          "targetHandle": {
            "fieldName": "tools",
            "id": "Agent-coordinator",
            "inputTypes": ["Tool"],
            "type": "other"
          }
        },
        "id": "reactflow__edge-URLComponent-weather{œdataTypeœ:œURLComponentœ,œidœ:œURLComponent-weatherœ,œnameœ:œcomponent_as_toolœ,œoutput_typesœ:[œToolœ]}-Agent-coordinator{œfieldNameœ:œtoolsœ,œidœ:œAgent-coordinatorœ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "URLComponent-weather",
        "sourceHandle": "{œdataTypeœ:œURLComponentœ,œidœ:œURLComponent-weatherœ,œnameœ:œcomponent_as_toolœ,œoutput_typesœ:[œToolœ]}",
        "target": "Agent-coordinator",
        "targetHandle": "{œfieldNameœ:œtoolsœ,œidœ:œAgent-coordinatorœ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "Agent",
            "id": "Agent-coordinator",
            "name": "response",
            "output_types": ["Message"]
          },
          "targetHandle": {
            "fieldName": "input_value",
            "id": "ChatOutput-main",
            "inputTypes": ["Data", "DataFrame", "Message"],
            "type": "other"
          }
        },
        "id": "reactflow__edge-Agent-coordinator{œdataTypeœ:œAgentœ,œidœ:œAgent-coordinatorœ,œnameœ:œresponseœ,œoutput_typesœ:[œMessageœ]}-ChatOutput-main{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-mainœ,œinputTypesœ:[œDataœ,œDataFrameœ,œMessageœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "Agent-coordinator",
        "sourceHandle": "{œdataTypeœ:œAgentœ,œidœ:œAgent-coordinatorœ,œnameœ:œresponseœ,œoutput_typesœ:[œMessageœ]}",
        "target": "ChatOutput-main",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-mainœ,œinputTypesœ:[œDataœ,œDataFrameœ,œMessageœ],œtypeœ:œotherœ}"
      }
    ],
    "nodes": [
      {
        "data": {
          "id": "ChatInput-main",
          "node": {
            "base_classes": ["Message"],
            "beta": false,
            "category": "inputs",
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Get chat inputs from the Playground.",
            "display_name": "Chat Input",
            "documentation": "",
            "edited": false,
            "field_order": ["input_value", "sender", "sender_name", "session_id"],
            "fields": ["input_value", "sender", "sender_name", "session_id"],
            "flow_name": "",
            "frozen": false,
            "icon": "MessageSquare",
            "is_composition": false,
            "LangflowVersion": "1.5.0",
            "legacy": false,
            "node_color": "#3B82F6",
            "official": false,
            "outputs": [
              {
                "display_name": "Message",
                "method": "message_response",
                "name": "message",
                "selected": "Message",
                "types": ["Message"]
              }
            ],
            "pinned": false,
            "template": {
              "input_value": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Text",
                "info": "Message to be passed as output.",
                "input_types": ["Data", "DataFrame", "Message"],
                "list": false,
                "name": "input_value",
                "required": true,
                "type": "other",
                "value": ""
              },
              "sender": {
                "_input_type": "DropdownInput",
                "advanced": true,
                "display_name": "Sender Type",
                "name": "sender",
                "options": ["Machine", "User"],
                "type": "str",
                "value": "User"
              },
              "sender_name": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Sender Name",
                "input_types": ["Message"],
                "name": "sender_name",
                "type": "str",
                "value": "User"
              },
              "session_id": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Session ID",
                "input_types": ["Message"],
                "name": "session_id",
                "type": "str",
                "value": ""
              }
            }
          },
          "type": "ChatInput"
        },
        "dragging": false,
        "height": 346,
        "id": "ChatInput-main",
        "position": {"x": 240, "y": 278},
        "positionAbsolute": {"x": 240, "y": 278},
        "selected": false,
        "type": "genericNode",
        "width": 384
      },
      {
        "data": {
          "id": "Agent-coordinator",
          "node": {
            "base_classes": ["Message"],
            "beta": false,
            "category": "agents",
            "conditional_paths": [],
            "custom_fields": {},
            "description": "EAIO Phase 2 Multi-Agent System with specialized models for energy optimization.",
            "display_name": "EAIO Phase 2 Coordinator Agent",
            "documentation": "",
            "edited": false,
            "field_order": [
              "agent_llm",
              "tools",
              "agent_description",
              "input_value",
              "agent_name",
              "memory",
              "system_message"
            ],
            "fields": [
              "agent_llm",
              "tools",
              "agent_description",
              "input_value",
              "agent_name",
              "memory",
              "system_message"
            ],
            "flow_name": "",
            "frozen": false,
            "icon": "bot",
            "is_composition": false,
            "LangflowVersion": "1.5.0",
            "legacy": false,
            "node_color": "#4ade80",
            "official": false,
            "outputs": [
              {
                "display_name": "Response",
                "method": "message_response",
                "name": "response",
                "selected": "Message",
                "types": ["Message"]
              }
            ],
            "pinned": false,
            "template": {
              "agent_description": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Agent Description",
                "info": "Agent description to help the Language Model understand its role.",
                "input_types": ["Message"],
                "name": "agent_description",
                "type": "str",
                "value": "EAIO Phase 2 Multi-Agent System coordinator with access to specialized models for energy optimization, forecasting, and building control."
              },
              "agent_llm": {
                "_input_type": "DropdownInput",
                "advanced": false,
                "display_name": "Language Model",
                "name": "agent_llm",
                "options": ["gpt-4o-mini", "gpt-4o", "gpt-3.5-turbo", "ChatOpenAI"],
                "value": "gpt-4o-mini"
              },
              "agent_name": {
                "_input_type": "StrInput",
                "advanced": true,
                "display_name": "Agent Name",
                "info": "Agent name to help the Language Model understand its role.",
                "input_types": ["str"],
                "name": "agent_name",
                "type": "str",
                "value": "EAIO Phase 2 Coordinator"
              },
              "input_value": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Question",
                "info": "Question to be passed to the agent.",
                "input_types": ["Message"],
                "name": "input_value",
                "required": true,
                "type": "str",
                "value": ""
              },
              "memory": {
                "_input_type": "BaseChatMemoryInput",
                "advanced": false,
                "display_name": "Memory",
                "input_types": ["BaseChatMemory"],
                "name": "memory",
                "value": null
              },
              "system_message": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "System Message",
                "info": "System message to be passed to the agent.",
                "input_types": ["Message"],
                "multiline": true,
                "name": "system_message",
                "type": "str",
                "value": "You are the EAIO Phase 2 Multi-Agent System Coordinator, an advanced AI system designed for energy optimization in buildings.\n\nYour capabilities include:\n\n🔬 **Specialized AI Models:**\n- TimesFM + LoRA fine-tuning for energy forecasting (R² ≥ 0.94)\n- Physics-informed Random Forest + Neural Networks for weather analysis\n- Multi-objective NSGA-II + XGBoost for optimization strategies\n- Ensemble TimesFM + DECODE LSTM for multi-horizon forecasting\n- Deep Q-Network + Physics-informed fuzzy logic for system control\n- Multi-layer statistical + physics validation for quality assurance\n\n📊 **Data Access:**\n- TimescaleDB with hypertables for time-series energy data\n- Real-time building management system integration\n- Weather API for climate correlation analysis\n- Historical consumption patterns and building envelope data\n\n🎯 **Key Performance Targets:**\n- Energy savings: 17-41% improvement\n- Forecasting accuracy: R² ≥ 0.94 with 95% confidence intervals\n- Real-time response: < 2 seconds for analytics, < 100ms for control\n- Physics validation: < 5% energy balance error\n\n⚡ **User Types & Services:**\n- Facility Managers: Real-time monitoring, alerts, operational reports\n- Building Owners: Portfolio analysis, ROI calculations, strategic planning\n- Energy Consultants: Advanced analytics, anomaly detection, predictive modeling\n\nAlways:\n- Provide uncertainty estimates with confidence intervals\n- Validate predictions against physics constraints\n- Explain which specialized models are being used\n- Include performance metrics when relevant\n- Ensure recommendations are actionable and safe\n\nYou represent the cutting edge of building energy intelligence, combining domain expertise with state-of-the-art AI models."
              },
              "tools": {
                "_input_type": "NestedDictInput",
                "advanced": false,
                "display_name": "Tools",
                "info": "Tools to be used by the agent.",
                "input_types": ["Tool"],
                "list": true,
                "name": "tools",
                "type": "other",
                "value": []
              }
            }
          },
          "type": "Agent"
        },
        "dragging": false,
        "height": 591,
        "id": "Agent-coordinator",
        "position": {"x": 813, "y": -199},
        "positionAbsolute": {"x": 813, "y": -199},
        "selected": false,
        "type": "genericNode",
        "width": 320
      },
      {
        "data": {
          "id": "ChatOutput-main",
          "node": {
            "base_classes": ["Message"],
            "beta": false,
            "category": "outputs",
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Display a chat message in the Playground.",
            "display_name": "Chat Output",
            "documentation": "",
            "edited": false,
            "field_order": ["input_value", "data_template"],
            "fields": ["input_value", "data_template"],
            "flow_name": "",
            "frozen": false,
            "icon": "ChatBubbleLeftRightIcon",
            "is_composition": false,
            "LangflowVersion": "1.5.0",
            "legacy": false,
            "node_color": "#3B82F6",
            "official": false,
            "outputs": [
              {
                "display_name": "Response",
                "method": "response",
                "name": "response",
                "selected": "Message",
                "types": ["Message"]
              }
            ],
            "pinned": false,
            "template": {
              "data_template": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Data Template",
                "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the repr of the data.",
                "input_types": ["Message"],
                "name": "data_template",
                "type": "str",
                "value": "{text}"
              },
              "input_value": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Text",
                "info": "Message to be passed as output.",
                "input_types": ["Data", "DataFrame", "Message"],
                "list": false,
                "name": "input_value",
                "required": true,
                "type": "other",
                "value": ""
              }
            }
          },
          "type": "ChatOutput"
        },
        "dragging": false,
        "height": 346,
        "id": "ChatOutput-main",
        "position": {"x": 1386, "y": 278},
        "positionAbsolute": {"x": 1386, "y": 278},
        "selected": false,
        "type": "genericNode",
        "width": 384
      },
      {
        "data": {
          "id": "SQLComponent-database",
          "node": {
            "base_classes": ["Tool"],
            "beta": false,
            "category": "tools",
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Executes SQL queries on SQLAlchemy-compatible databases.",
            "display_name": "SQL Database",
            "documentation": "https://docs.langflow.org/components-data#sql-database",
            "edited": false,
            "field_order": ["database_uri", "include_columns", "add_error"],
            "fields": ["database_uri", "include_columns", "add_error"],
            "flow_name": "",
            "frozen": false,
            "icon": "database",
            "is_composition": false,
            "LangflowVersion": "1.5.0",
            "legacy": false,
            "node_color": "#10B981",
            "official": false,
            "outputs": [
              {
                "display_name": "Component as Tool",
                "method": "build_tool",
                "name": "component_as_tool",
                "selected": "Tool",
                "types": ["Tool"]
              }
            ],
            "pinned": false,
            "template": {
              "add_error": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Add Error",
                "info": "If True, the error will be added to the result",
                "name": "add_error",
                "type": "bool",
                "value": false
              },
              "database_uri": {
                "_input_type": "StrInput",
                "advanced": false,
                "display_name": "Database URI",
                "info": "Database URI for connection",
                "name": "database_uri",
                "placeholder": "sqlite:///./example.db",
                "type": "str",
                "value": "postgresql://eaio_user:password@localhost:5434/eaio_energy"
              },
              "include_columns": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Include Columns",
                "name": "include_columns",
                "type": "bool",
                "value": true
              }
            }
          },
          "type": "SQLComponent"
        },
        "dragging": false,
        "height": 346,
        "id": "SQLComponent-database",
        "position": {"x": 240, "y": -199},
        "positionAbsolute": {"x": 240, "y": -199},
        "selected": false,
        "type": "genericNode",
        "width": 384
      },
      {
        "data": {
          "id": "URLComponent-weather",
          "node": {
            "base_classes": ["Tool"],
            "beta": false,
            "category": "tools", 
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Fetch content from one or more web pages, following links recursively.",
            "display_name": "URL",
            "documentation": "https://docs.langflow.org/components-data#url",
            "edited": false,
            "field_order": ["urls", "max_depth", "format"],
            "fields": ["urls", "max_depth", "format"],
            "flow_name": "",
            "frozen": false,
            "icon": "layout-template",
            "is_composition": false,
            "LangflowVersion": "1.5.0",
            "legacy": false,
            "node_color": "#3B82F6",
            "official": false,
            "outputs": [
              {
                "display_name": "Component as Tool",
                "method": "build_tool",
                "name": "component_as_tool",
                "selected": "Tool",
                "types": ["Tool"]
              }
            ],
            "pinned": false,
            "template": {
              "format": {
                "_input_type": "DropdownInput",
                "advanced": true,
                "display_name": "Output Format",
                "info": "Output Format. Use 'Text' to extract the text from the HTML or 'HTML' for the raw HTML content.",
                "name": "format",
                "options": ["Text", "HTML"],
                "type": "str",
                "value": "Text"
              },
              "max_depth": {
                "_input_type": "SliderInput",
                "advanced": false,
                "display_name": "Depth",
                "info": "Controls how many 'clicks' away from the initial page the crawler will go",
                "name": "max_depth",
                "range_spec": {"min": 1, "max": 5, "step": 1},
                "type": "int",
                "value": 1
              },
              "urls": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "URLs",
                "info": "Enter one or more URLs to crawl recursively, by clicking the '+' button.",
                "is_list": true,
                "name": "urls",
                "placeholder": "Enter a URL...",
                "type": "str",
                "value": ["https://api.openweathermap.org/"]
              }
            }
          },
          "type": "URLComponent"
        },
        "dragging": false,
        "height": 346,
        "id": "URLComponent-weather",
        "position": {"x": 240, "y": 400},
        "positionAbsolute": {"x": 240, "y": 400},
        "selected": false,
        "type": "genericNode",
        "width": 384
      }
    ],
    "viewport": {
      "x": 154,
      "y": 325,
      "zoom": 0.8
    }
  },
  "description": "EAIO Phase 2 Multi-Agent System with specialized AI models for building energy optimization. Features TimesFM+LoRA forecasting, physics-informed weather analysis, NSGA-II optimization, ensemble modeling, DQN control systems, and multi-layer validation. Achieves 17-41% energy savings with R²≥0.94 forecasting accuracy.",
  "endpoint_name": null,
  "id": "phase2-specialized-models-v3",
  "is_component": false,
  "last_tested_version": "1.5.0.post1", 
  "name": "EAIO Phase 2 - Specialized Models",
  "tags": ["energy", "optimization", "ai", "specialized-models", "physics-informed", "multi-agent"]
}